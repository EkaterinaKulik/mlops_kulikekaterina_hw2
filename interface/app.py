# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18RIRYukk9NXNbK6HmJd_am2tkNriBqGR
"""

import os
import time
import pandas as pd
import psycopg2
import streamlit as st
import plotly.express as px

PGHOST = os.getenv("PGHOST", "postgres")
PGPORT = int(os.getenv("PGPORT", "5432"))
PGUSER = os.getenv("PGUSER", "postgres")
PGPASSWORD = os.getenv("PGPASSWORD", "postgres")
PGDATABASE = os.getenv("PGDATABASE", "frauddb")
TABLE_NAME = os.getenv("SCORES_TABLE", "scores")

def get_conn():
    return psycopg2.connect(
        host=PGHOST,
        port=PGPORT,
        user=PGUSER,
        password=PGPASSWORD,
        dbname=PGDATABASE,
    )

def fetch_last_frauds(limit=10):
    query = f"""
        SELECT transaction_id, score, fraud_flag, created_at
        FROM {TABLE_NAME}
        WHERE fraud_flag = 1
        ORDER BY created_at DESC
        LIMIT %s;
    """
    with get_conn() as conn:
        return pd.read_sql_query(query, conn, params=(limit,))

def fetch_last_scores(limit=100):
    query = f"""
        SELECT transaction_id, score, fraud_flag, created_at
        FROM {TABLE_NAME}
        ORDER BY created_at DESC
        LIMIT %s;
    """
    with get_conn() as conn:
        return pd.read_sql_query(query, conn, params=(limit,))

def main():
    st.set_page_config(page_title="Fraud Detection Monitor", layout="wide")
    st.title("üí≥ Fraud Detection Monitor")

    st.markdown("""
    **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:**
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç **10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö** —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å `fraud_flag = 1`;
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç **—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤** –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º.
    """)

    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        try:
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ fraud=1 (–¥–æ 10)")
                df_fraud = fetch_last_frauds(10)
                if df_fraud.empty:
                    st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å fraud_flag = 1.")
                else:
                    st.dataframe(df_fraud, use_container_width=True)

            with col2:
                st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)")
                df_scores = fetch_last_scores(100)
                if df_scores.empty:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
                else:
                    fig = px.histogram(df_scores, x="score", nbins=30, title="Score distribution")
                    fig.update_layout(margin=dict(l=20, r=20, t=40, b=20))
                    st.plotly_chart(fig, use_container_width=True)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    st.caption(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL: {PGUSER}@{PGHOST}:{PGPORT}/{PGDATABASE}, —Ç–∞–±–ª–∏—Ü–∞: {TABLE_NAME}")

if __name__ == "__main__":
    time.sleep(2)
    main()